{"version":3,"sources":["components/header/header.component.jsx","components/sort-box/utils.js","components/sort-box/sort-box.component.jsx","components/algorithms-box/utils.js","components/algorithms-box/algorithms-box.component.jsx","components/details-box/details-box.component.jsx","containers/App.js","reportWebVitals.js","index.js"],"names":["Header","orginalArray","handleUpdate","toggleViewDetails","className","onClick","themeMapper","green","red","yellow","blue","purple","brown","complexityMapperWorst","complexityMapperBest","SortBox","array","algorithName","algorithm","theme","tbs","mainColor","useState","currArray","setCurrArray","handleClick","useEffect","style","color","border","map","val","i","height","backgroundColor","title","sleep","ms","Promise","resolve","setTimeout","selectionSort","stateSetter","a","length","j","insertionSort","key","bubbleSort","getPartition","left","right","pivot","quickSorter","pivotIndex","quickSort","merge","arr","center","rightEnd","leftEnd","cache","push","pop","merger","Math","floor","mergeSort","shellSort","n","interval","temp","AlgorithmsBox","toBeSorted","DetailsBox","idx","cursor","min","max","App","props","setState","viewDetails","state","updateToBeSorted","Array","random","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2WAoBeA,EAhBA,SAAC,GAAoD,EAAnDC,aAAoD,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,kBACzC,OACQ,gCACI,oDACA,oBACIC,UAAU,8BACVC,QAASH,EAFb,sBAIA,oBACIE,UAAU,2BACVC,QAASF,EAFb,+B,gBCZHG,G,MAAc,CACvBC,MAAO,UACPC,IAAK,UACLC,OAAQ,UACRC,KAAM,UACNC,OAAQ,UACRC,MAAO,YAGEC,EAAwB,CACjC,iBAAkB,SAClB,iBAAkB,SAClB,cAAe,SACf,aAAc,SACd,aAAc,gBACd,aAAc,qBAGLC,EAAuB,CAChC,iBAAkB,SAClB,iBAAkB,OAClB,cAAe,OACf,aAAc,gBACd,aAAc,gBACd,aAAc,iBC0BHC,EAxCC,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC/CC,EAAYf,EAAYa,GAC9B,EAAkCG,mBAAS,YAAIN,IAA/C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAc,WAChBP,EAAU,YAAIK,GAAYC,GAC1BN,EAAU,YAAIK,GAAYC,GAC1BN,EAAU,YAAIK,GAAYC,IAM9B,OAJAE,qBAAU,WACM,IAARN,GACAK,MACL,CAACL,IAEA,sBAAKhB,UAAU,YAAf,UACI,oBAAIuB,MAAO,CAACC,MAAOP,GAAnB,SAAgCJ,IAChC,qBAAKb,UAAU,mBAAmBuB,MAAO,CAACE,OAAO,gBAAD,OAAkBR,IAAlE,SAEIE,EAAUO,KAAI,SAACC,EAAKC,GAAN,OACV,qBAEIL,MAAO,CAACM,OAAO,GAAD,OAAKF,EAAL,MAAcG,gBAAiBf,GAC7Cf,UAAS,cAASe,GAClBgB,MAAK,UAAKJ,EAAL,gCAAgCC,EAAI,IAHpCA,QAQjB,sBAAK5B,UAAU,gBAAf,UACI,qBACIA,UAAS,6BAAwBe,EAAxB,KACTd,QAASoB,EAFb,kBAIA,oBAAIE,MAAO,CAACC,MAAOP,GAAnB,6BACA,qBAAIM,MAAO,CAACC,MAAOP,GAAnB,wBAA2CP,EAAqBG,MAChE,qBAAIU,MAAO,CAACC,MAAOP,GAAnB,yBAA4CR,EAAsBI,a,uBC5C5EmB,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAGvCI,EAAa,uCAAG,WAAOzB,EAAO0B,GAAd,mBAAAC,EAAA,sDAChBX,EAAI,EADY,YACTA,EAAIhB,EAAM4B,QADD,iBAEdC,EAAIb,EAAI,EAFM,YAEHa,EAAI7B,EAAM4B,QAFP,sBAGjB5B,EAAMgB,GAAKhB,EAAM6B,IAHA,0BAII,CAAC7B,EAAM6B,GAAI7B,EAAMgB,IAAvChB,EAAMgB,GAJY,KAIRhB,EAAM6B,GAJE,eAKbT,EAAM,IALO,QAMnBM,EAAY1B,GANO,QAEe6B,GAAK,EAFpB,uBACSb,GAAK,EADd,2DAAH,wDAWbc,EAAa,uCAAG,WAAO9B,EAAO0B,GAAd,mBAAAC,EAAA,sDAChBX,EAAI,EADY,YACTA,EAAIhB,EAAM4B,QADD,iBAEjBC,EAAIb,EAAI,EACRe,EAAM/B,EAAMgB,GAHK,YAIda,GAAK,GAAK7B,EAAM6B,GAAKE,GAJP,wBAKjB/B,EAAM6B,EAAE,GAAK7B,EAAM6B,GACnBA,GAAK,EANY,SAOXT,EAAM,IAPK,OAQjBM,EAAY1B,GARK,uBAUrBA,EAAM6B,EAAE,GAAKE,EAVQ,QACSf,GAAK,EADd,2DAAH,wDAcbgB,EAAU,uCAAG,WAAOhC,EAAO0B,GAAd,mBAAAC,EAAA,sDACbX,EAAI,EADS,YACNA,EAAIhB,EAAM4B,OAAS,GADb,iBAEXC,EAAI,EAFO,YAEJA,EAAI7B,EAAM4B,OAAO,EAAEZ,GAFf,sBAGdhB,EAAM6B,GAAK7B,EAAM6B,EAAE,IAHL,0BAIS,CAAC7B,EAAM6B,EAAE,GAAI7B,EAAM6B,IAA3C7B,EAAM6B,GAJS,KAIL7B,EAAM6B,EAAE,GAJH,eAKVT,EAAM,IALI,QAMhBM,EAAY1B,GANI,QAEkB6B,GAAK,EAFvB,uBACgBb,GAAK,EADrB,2DAAH,wDAWjBiB,EAAY,uCAAG,WAAOjC,EAAOkC,EAAMC,EAAOT,GAA3B,uBAAAC,EAAA,sDAEnBS,EAAQpC,EAAMkC,GACdlB,EAAIkB,EAAO,EACXL,EAAIM,EAJe,YAKZnB,GAAKa,GALO,iBAMjB,KAAO7B,EAAMgB,GAAKoB,GAChBpB,GAAK,EACP,KAAOhB,EAAM6B,GAAKO,GAChBP,GAAK,EATU,KAUbb,GAAKa,GAVQ,0BAWQ,CAAC7B,EAAM6B,GAAI7B,EAAMgB,IAAvChB,EAAMgB,GAXQ,KAWJhB,EAAM6B,GAXF,KAYfb,GAAK,EACLa,GAAK,EAbU,UAcTT,EAAM,IAdG,QAefM,EAAY1B,GAfG,kCAkBfgB,IAAMa,EAlBS,0BAmBS,CAAC7B,EAAMkC,GAAOlC,EAAM6B,IAA7C7B,EAAM6B,GAnBU,KAmBN7B,EAAMkC,GAnBA,eAoBXd,EAAM,IApBK,QAqBjBM,EAAY1B,GArBK,yBAuBboB,EAAM,IAvBO,eAwBnBM,EAAY1B,GAxBO,kBAyBZ6B,GAzBY,4CAAH,4DA4BZQ,EAAW,uCAAG,WAAOrC,EAAOkC,EAAMC,EAAOT,GAA3B,eAAAC,EAAA,2DACdO,EAAOC,GADO,iCAEOF,EAAajC,EAAOkC,EAAMC,EAAOT,GAFxC,cAEZY,EAFY,OAGhBD,EAAYrC,EAAOkC,EAAMI,EAAa,EAAGZ,GAHzB,SAIVN,EAAM,IAJI,cAKhBM,EAAY1B,GACZqC,EAAYrC,EAAOsC,EAAa,EAAGH,EAAOT,GAN1B,UAOVN,EAAM,IAPI,QAQhBM,EAAY1B,GARI,4CAAH,4DAYJuC,EAAS,uCAAG,WAAOvC,EAAO0B,GAAd,SAAAC,EAAA,sEACjBU,EAAYrC,EAAO,EAAGA,EAAM4B,OAAS,EAAGF,GADvB,uBAEjBN,EAAM,IAFW,OAGvBM,EAAY1B,GAHW,2CAAH,wDAMhBwC,EAAK,uCAAG,WAAOC,EAAKP,EAAMQ,EAAQC,EAAUjB,GAApC,mBAAAC,EAAA,sDAIZ,IAHIiB,EAAUF,EACVP,EAAQO,EAAS,EACjBG,EAAQ,GACLX,GAAQU,GAAWT,GAASQ,GAC7BF,EAAIP,GAAQO,EAAIN,GAAQU,EAAMC,KAAKL,EAAIP,MACtCW,EAAMC,KAAKL,EAAIN,MAEtB,KAAOD,GAAQU,GAASC,EAAMC,KAAKL,EAAIP,MACvC,KAAOC,GAASQ,GAAUE,EAAMC,KAAKL,EAAIN,MACzC,KAAuB,IAAjBU,EAAMjB,QACVa,EAAIE,KAAcE,EAAME,MAXd,gBAaN3B,EAAM,IAbA,OAcZM,EAAYe,GAdA,2CAAH,8DAiBLO,EAAM,uCAAG,WAAOP,EAAKP,EAAMC,EAAOT,GAAzB,eAAAC,EAAA,2DACTO,EAAOC,GADE,wBAEPO,EAASO,KAAKC,OAAOhB,EAAOC,GAAS,GAF9B,SAGLa,EAAOP,EAAKP,EAAMQ,EAAQhB,GAHrB,uBAILsB,EAAOP,EAAKC,EAAS,EAAGP,EAAOT,GAJ1B,uBAKLc,EAAMC,EAAKP,EAAMQ,EAAQP,EAAOT,GAL3B,wBAMLN,EAAM,IAND,QAOXM,EAAYe,GAPD,4CAAH,4DAWCU,EAAS,uCAAG,WAAOnD,EAAO0B,GAAd,SAAAC,EAAA,sEACjBqB,EAAOhD,EAAO,EAAGA,EAAM4B,OAAS,EAAGF,GADlB,uBAEjBN,EAAM,IAFW,OAGvBM,EAAY1B,GAHW,2CAAH,wDAMToD,EAAS,uCAAG,WAAOpD,EAAO0B,GAAd,uBAAAC,EAAA,sDACjB0B,EAAIrD,EAAM4B,OACV0B,EAAWL,KAAKC,MAAMG,EAAE,GAFP,YAGdC,EAAW,GAHG,iBAIVtC,EAAIsC,EAJM,YAIItC,EAAIqC,GAJR,iBAKbE,EAAOvD,EAAMgB,GACba,EAAIb,EANS,YAOVa,GAAKyB,GAAYtD,EAAM6B,EAAIyB,GAAYC,GAP7B,wBAQfvD,EAAM6B,GAAK7B,EAAM6B,EAAGyB,GACpBzB,GAAKyB,EATU,UAUTlC,EAAM,IAVG,QAWfM,EAAY1B,GAXG,uBAajBA,EAAM6B,GAAK0B,EAbM,QAIWvC,GAAK,EAJhB,uBAenBsC,EAAWL,KAAKC,MAAMI,EAAS,GAfZ,uBAiBrB5B,EAAY1B,GAjBS,4CAAH,wDCxDPwD,EAjDO,SAAC,GAAgC,IAA/BvE,EAA8B,EAA9BA,aAAcwE,EAAgB,EAAhBA,WAClC,OACI,sBAAKrE,UAAU,iBAAf,UACE,cAAC,EAAD,CACEY,MAAOf,EACPmB,IAAKqD,EACLxD,aAAa,iBACbC,UAAWuB,EACXtB,MAAM,UAER,cAAC,EAAD,CACEH,MAAOf,EACPmB,IAAKqD,EACLxD,aAAa,aACbC,UAAWiD,EACXhD,MAAM,WAER,cAAC,EAAD,CACEH,MAAOf,EACPmB,IAAKqD,EACLxD,aAAa,cACbC,UAAW8B,EACX7B,MAAM,WAER,cAAC,EAAD,CACEH,MAAOf,EACPmB,IAAKqD,EACLxD,aAAa,aACbC,UAAWqC,EACXpC,MAAM,SAER,cAAC,EAAD,CACEH,MAAOf,EACPmB,IAAKqD,EACLxD,aAAa,iBACbC,UAAW4B,EACX3B,MAAM,QAER,cAAC,EAAD,CACEH,MAAOf,EACPmB,IAAKqD,EACLxD,aAAa,aACbC,UAAWkD,EACXjD,MAAM,cC9BHuD,G,MAxBI,SAAC,GAAuC,IAAtCzE,EAAqC,EAArCA,aAAcE,EAAuB,EAAvBA,kBAC/B,OACI,sBAAKC,UAAU,cAAf,UACI,oBAAIuB,MAAO,CAACC,MAAO,WAAnB,2BACA,qBAAKxB,UAAU,YAAf,SAEQH,EAAa6B,KAAI,SAACC,EAAK4C,GAAN,OACb,qBAEIxC,MAAK,UAAKJ,EAAL,gCAAgC4C,EAAM,GAC3ChD,MAAO,CAACiD,OAAQ,aAHpB,SAIC,6BAAK7C,KAHG4C,QAMrB,qBAAIhD,MAAO,CAACC,MAAO,WAAnB,4BAA+CqC,KAAKY,IAAL,MAAAZ,KAAI,YAAQhE,OAC3D,qBAAI0B,MAAO,CAACC,MAAO,WAAnB,4BAA+CqC,KAAKa,IAAL,MAAAb,KAAI,YAAQhE,OAC3D,oBACIG,UAAU,8BACVC,QAASF,EAFb,qBC0BG4E,E,kDAtCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQR7E,kBAAoB,WAClB,EAAK8E,SAAS,CAACC,aAAc,EAAKC,MAAMD,eAVvB,EAanBE,iBAAmB,WACjB,EAAKH,SAAS,CAACR,WAAY,KAZ3B,EAAKU,MAAQ,CACXlF,aAAc,YAAIoF,MAAM,MAAMvD,KAAI,kBAAMmC,KAAKC,MAAsB,IAAhBD,KAAKqB,aACxDb,WAAY,EACZS,aAAa,GALE,E,0CAiBnB,WACE,OACE,sBAAK9E,UAAU,YAAf,UACE,cAAC,EAAD,CACEH,aAAcsF,KAAKJ,MAAMlF,aACzBC,aAAcqF,KAAKH,iBACnBjF,kBAAmBoF,KAAKpF,oBAE1B,cAAC,EAAD,CACEF,aAAcsF,KAAKJ,MAAMlF,aACzBwE,WAAYc,KAAKJ,MAAMV,aAExBc,KAAKJ,MAAMD,aAAe,cAAC,EAAD,CACzBjF,aAAcsF,KAAKJ,MAAMlF,aACzBE,kBAAmBoF,KAAKpF,2B,GAhChBqF,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6be17011.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './header.styles.css';\r\n\r\nconst Header = ({orginalArray, handleUpdate, toggleViewDetails}) => {\r\n    return (\r\n            <div>\r\n                <h1>Sorting Visualiser</h1>\r\n                <h2 \r\n                    className=\"custom-button1 box2 purple2\"\r\n                    onClick={handleUpdate}\r\n                >Sort All</h2>\r\n                <h2 \r\n                    className=\"custom-button1 box2 red2\"\r\n                    onClick={toggleViewDetails}\r\n                >Array Details</h2>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Header;","export const themeMapper = {\r\n    green: \"#56B870\",\r\n    red: \"#C655BE\",\r\n    yellow: \"#dee05c\",\r\n    blue: \"#2077ce\",\r\n    purple: \"#A88BEB\",\r\n    brown: \"#feada6\"\r\n};\r\n\r\nexport const complexityMapperWorst = {\r\n    \"Selection Sort\": \"O(N^2)\",\r\n    \"Insertion Sort\": \"O(N^2)\",\r\n    \"Bubble Sort\": \"O(N^2)\",\r\n    \"Quick Sort\": \"O(N^2)\",\r\n    \"Merge Sort\": \"O(N x log(N))\",\r\n    \"Shell Sort\": \"O((N x log(N))^2)\"\r\n};\r\n\r\nexport const complexityMapperBest = {\r\n    \"Selection Sort\": \"O(N^2)\",\r\n    \"Insertion Sort\": \"O(N)\",\r\n    \"Bubble Sort\": \"O(N)\",\r\n    \"Quick Sort\": \"O(N x log(N))\",\r\n    \"Merge Sort\": \"O(N x log(N))\",\r\n    \"Shell Sort\": \"O(N x log(N))\"\r\n};","import React, {useState, useEffect} from 'react';\r\n\r\nimport './sort-box.styles.css';\r\n\r\nimport {\r\n    themeMapper,\r\n    complexityMapperWorst,\r\n    complexityMapperBest\r\n} from './utils';\r\n\r\nconst SortBox = ({array, algorithName, algorithm, theme, tbs}) => {\r\n    const mainColor = themeMapper[theme];\r\n    const [currArray, setCurrArray] = useState([...array]);\r\n    const handleClick = () => {\r\n        algorithm([...currArray], setCurrArray);\r\n        algorithm([...currArray], setCurrArray);\r\n        algorithm([...currArray], setCurrArray);\r\n    };\r\n    useEffect(() => {\r\n        if (tbs === 1)\r\n            handleClick();\r\n    }, [tbs]);\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 style={{color: mainColor}}>{algorithName}</h2>\r\n            <div className='sorted-container' style={{border: `0.3rem solid ${mainColor}`}}>\r\n            {\r\n                currArray.map((val, i) => \r\n                    <div \r\n                        key={i}\r\n                        style={{height: `${val}px`, backgroundColor: theme}}\r\n                        className={`box ${theme}`}\r\n                        title={`${val} - Position in Array ${i + 1}`}\r\n                    ></div>\r\n                )\r\n            }\r\n            </div>\r\n            <div className=\"button-result\">\r\n                <div \r\n                    className={`custom-button box1 ${theme}1`}\r\n                    onClick={handleClick}\r\n                >Sort</div>\r\n                <h3 style={{color: mainColor}}>Time Complexity</h3>\r\n                <h4 style={{color: mainColor}}>Best Case: {complexityMapperBest[algorithName]}</h4>\r\n                <h4 style={{color: mainColor}}>Worst Case: {complexityMapperWorst[algorithName]}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortBox;","const sleep = ms => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nexport const selectionSort = async (array, stateSetter) => {\r\n    for (let i = 0; i < array.length; i += 1) {\r\n      for (let j = i + 1; j < array.length; j += 1)\r\n        if (array[i] > array[j]) {\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n          await sleep(10);\r\n          stateSetter(array);\r\n        }\r\n    }\r\n};\r\n\r\nexport const insertionSort = async (array, stateSetter) => {\r\n    for (let i = 1; i < array.length; i += 1) {\r\n        let j = i - 1;\r\n        let key = array[i];\r\n        while (j >= 0 && array[j] > key) {\r\n            array[j+1] = array[j];\r\n            j -= 1;\r\n            await sleep(10);\r\n            stateSetter(array);\r\n        }\r\n        array[j+1] = key;\r\n    }\r\n};\r\n\r\nexport const bubbleSort = async (array, stateSetter) => {\r\n    for (let i = 0; i < array.length - 1; i += 1) {\r\n      for (let j = 0; j < array.length-1-i; j += 1)\r\n        if (array[j] > array[j+1]) {\r\n          [array[j], array[j+1]] = [array[j+1], array[j]];\r\n          await sleep(10);\r\n          stateSetter(array);\r\n        }\r\n    }\r\n};\r\n\r\nconst getPartition = async (array, left, right, stateSetter) => {\r\n  let pivot, i, j;\r\n  pivot = array[left];\r\n  i = left + 1;\r\n  j = right;\r\n  while (i <= j) {\r\n    while (array[i] < pivot)\r\n      i += 1;\r\n    while (array[j] > pivot)\r\n      j -= 1;\r\n    if (i <= j) {\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n      i += 1;\r\n      j -= 1;\r\n      await sleep(30);\r\n      stateSetter(array);\r\n    }\r\n  }\r\n  if (i !== j) {\r\n    [array[j], array[left]] = [array[left], array[j]];\r\n    await sleep(30);\r\n    stateSetter(array);\r\n  }\r\n  await sleep(30);\r\n  stateSetter(array);\r\n  return j;\r\n};\r\n\r\nconst quickSorter = async (array, left, right, stateSetter) => {\r\n  if (left < right) {\r\n    let pivotIndex = await getPartition(array, left, right, stateSetter);\r\n    quickSorter(array, left, pivotIndex - 1, stateSetter);\r\n    await sleep(30);\r\n    stateSetter(array);\r\n    quickSorter(array, pivotIndex + 1, right, stateSetter);\r\n    await sleep(30);\r\n    stateSetter(array);\r\n  }\r\n};\r\n\r\nexport const quickSort = async (array, stateSetter) => {\r\n  await quickSorter(array, 0, array.length - 1, stateSetter);\r\n  await sleep(10);\r\n  stateSetter(array);\r\n};\r\n\r\nconst merge = async (arr, left, center, rightEnd, stateSetter) => {\r\n  let leftEnd = center, \r\n      right = center + 1, \r\n      cache = [];\r\n  while (left <= leftEnd && right <= rightEnd) {\r\n    if (arr[left] < arr[right]) cache.push(arr[left++]);//cache[cacheSize++] = arr[left++];\r\n    else cache.push(arr[right++]);//cache[cacheSize++] = arr[right++]\r\n  }\r\n  while (left <= leftEnd) cache.push(arr[left++]);//cache[cacheSize++] = arr[left++];\r\n  while (right <= rightEnd) cache.push(arr[right++]);//cache[cacheSize++] = arr[right++];\r\n  while(cache.length !== 0) {\r\n    arr[rightEnd--] = cache.pop();\r\n  }\r\n  await sleep(10);\r\n  stateSetter(arr);\r\n};\r\n\r\nconst merger = async (arr, left, right, stateSetter) => {\r\n  if (left < right) {\r\n    let center = Math.floor((left + right) / 2);\r\n    await merger(arr, left, center, stateSetter);\r\n    await merger(arr, center + 1, right, stateSetter);\r\n    await merge(arr, left, center, right, stateSetter);\r\n    await sleep(10);\r\n    stateSetter(arr);\r\n  }\r\n};\r\n\r\nexport const mergeSort = async (array, stateSetter) => {\r\n  await merger(array, 0, array.length - 1, stateSetter);\r\n  await sleep(10);\r\n  stateSetter(array);\r\n};\r\n\r\nexport const shellSort = async (array, stateSetter) => {\r\n    let n = array.length;\r\n    let interval = Math.floor(n/2);\r\n    while (interval > 0) { \r\n      for (let i = interval; i < n; i += 1) {\r\n        let temp = array[i];\r\n        let j = i;\r\n        while (j >= interval && array[j - interval] > temp) {\r\n          array[j] = array[j- interval];\r\n          j -= interval;\r\n          await sleep(10);\r\n          stateSetter(array);\r\n        }\r\n        array[j] = temp;\r\n      }\r\n      interval = Math.floor(interval/2);\r\n    }\r\n    stateSetter(array);\r\n};","import React from 'react';\r\n\r\nimport './algorithms-box.styles.css';\r\n\r\nimport SortBox from '../sort-box/sort-box.component';\r\n\r\nimport {\r\n  selectionSort,\r\n  insertionSort,\r\n  bubbleSort,\r\n  quickSort,\r\n  mergeSort,\r\n  shellSort\r\n} from './utils';\r\n\r\nconst AlgorithmsBox = ({orginalArray, toBeSorted}) => {\r\n    return (\r\n        <div className=\"algorithms-box\">\r\n          <SortBox \r\n            array={orginalArray}\r\n            tbs={toBeSorted}\r\n            algorithName=\"Selection Sort\"\r\n            algorithm={selectionSort}\r\n            theme=\"green\"\r\n          />\r\n          <SortBox \r\n            array={orginalArray}\r\n            tbs={toBeSorted}\r\n            algorithName=\"Merge Sort\"\r\n            algorithm={mergeSort}\r\n            theme=\"purple\"\r\n          />\r\n          <SortBox \r\n            array={orginalArray}\r\n            tbs={toBeSorted}\r\n            algorithName=\"Bubble Sort\"\r\n            algorithm={bubbleSort}\r\n            theme=\"yellow\"\r\n          />\r\n          <SortBox \r\n            array={orginalArray}\r\n            tbs={toBeSorted}\r\n            algorithName=\"Quick Sort\"\r\n            algorithm={quickSort}\r\n            theme=\"blue\"\r\n          />\r\n          <SortBox \r\n            array={orginalArray}\r\n            tbs={toBeSorted}\r\n            algorithName=\"Insertion Sort\"\r\n            algorithm={insertionSort}\r\n            theme=\"red\"\r\n          />\r\n          <SortBox \r\n            array={orginalArray}\r\n            tbs={toBeSorted}\r\n            algorithName=\"Shell Sort\"\r\n            algorithm={shellSort}\r\n            theme=\"brown\"\r\n          />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgorithmsBox;","import React from 'react';\r\n\r\nimport './details-box.styles.css';\r\n\r\nconst DetailsBox = ({orginalArray, toggleViewDetails}) => {\r\n    return (\r\n        <div className=\"details-box\">\r\n            <h1 style={{color: '#8d69e0'}}>Array Details</h1>\r\n            <div className=\"array-box\">\r\n                {\r\n                    orginalArray.map((val, idx) => \r\n                        <div \r\n                            key={idx}\r\n                            title={`${val} - Position in Array ${idx + 1}`}\r\n                            style={{cursor: 'crosshair'}}\r\n                        ><h3>{val}</h3></div>)\r\n                }\r\n            </div>\r\n            <h3 style={{color: '#56b870'}}>Minimum Value: {Math.min(...orginalArray)}</h3>\r\n            <h3 style={{color: '#ff0000'}}>Maximum Value: {Math.max(...orginalArray)}</h3>\r\n            <h2 \r\n                className=\"custom-button1 box2 yellow2\"\r\n                onClick={toggleViewDetails}\r\n            >Ok</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DetailsBox;","import React from 'react';\nimport './App.css';\n\nimport Header from '../components/header/header.component';\nimport AlgorithmsBox from '../components/algorithms-box/algorithms-box.component';\nimport DetailsBox from '../components/details-box/details-box.component';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      orginalArray: [...Array(100)].map(() => Math.floor(Math.random() * 300)),\n      toBeSorted: 0,\n      viewDetails: true\n    };\n  }\n\n  toggleViewDetails = () => {\n    this.setState({viewDetails: !this.state.viewDetails});\n  }\n\n  updateToBeSorted = () => {\n    this.setState({toBeSorted: 1});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header \n          orginalArray={this.state.orginalArray} \n          handleUpdate={this.updateToBeSorted}\n          toggleViewDetails={this.toggleViewDetails}\n        />\n        <AlgorithmsBox \n          orginalArray={this.state.orginalArray}\n          toBeSorted={this.state.toBeSorted}\n        />\n        {this.state.viewDetails && <DetailsBox \n          orginalArray={this.state.orginalArray}\n          toggleViewDetails={this.toggleViewDetails}\n          />}\n      </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}